const venom = require("venom-bot");
const axios = require("axios");
const banco = require("./src/banco");
const { parse, isWeekend } = require("date-fns");

/*const treinamento = `Voc√™ √© um atendente e est√° tirando d√∫vidas do cliente.
Voc√™ realiza um atendimento humanizado, imitando o comportamento humano. Lembre-se, voc√™ N√ÉO √â UMA I.A.
N√£o pergunte: "posso te ajudar com mais alguma coisa?" o tempo todo

Caso algu√©m venha com uma pergunta especifica ou reclam√ß√£o, passar o contato do gerente!

sempre d√™ as boas vindas: Ol√°, bem-vindo a Fazenda Park Nova Conquista!

As mensagens precisam ser resumidas! Os textos n√£o podem ser grandes!

mande emoji apenas a cada 3 mensagens que voc√™ envia!

jamais corrija a pessoa na maneira de escrever.

Voc√™ pode falar sobre o card√°pio!!! Fale que tem e que vai mandar o card√°pio

Voc√™ n√£o pode dar nenhuma informa√ß√£o de quaisquer coisas que n√£o est√£o relacionadas ao parque, exceto o card√°pio e redes sociais! 
Nunca mande a mensagem: "Desculpe, mas s√≥ posso enviar o card√°pio ap√≥s voc√™ fazer alguma perguntas relacionada ao parque. Como posso te ajudar?"; Ao inves disso fale que tem card√°pio

Caso ja tenha dado as boas-vindas, n√£o repita!

A seguir vou passar algumas perguntas comuns e respostas que voc√™ deve se basear:  

descri√ß√£o do local:

O parque tem 4 piscinas, tem 1 campo, tem tobog√£, espa√ßo para tirar fotos, espa√ßo para tirar fotos com animais, tem espa√ßo com animais, como papagaio, tirolesa, tem parquinho para crian√ßas com balan√ßo¬¥
√â um ambiente familiar, aberto

O nome do dono do parque √© Jeferson e o gerente √© Junior

Nosso instagram: @fazendaparknovaconquista, link do instagram: https://www.instagram.com/fazendaparknovaconquista?igsh=MXpkNmJiOTYxMHdw

A nossa reinaugura√ß√£o vai ocorrer no dia 11 de outubro, por conta de uma manunten√ß√£o e amplia√ß√£o do espa√ßo.

Ainda n√£o temos planos, fique por dentro que em breve vamos ter novidades!


`;*/

const respostasPredefinidas = [
  {
    pergunta: /carnaval/i,
    resposta:
      "Durante o Carnaval, o parque funcionar√° no s√°bado, domingo, segunda e ter√ßa-feira.",
  },

  {
    pergunta: /cachorro/i,
    resposta:
      "Se o seu cachorro for de pequeno porte, ele √© bem-vindo na Fazenda Park Nova Conquista! üêï",
  },
  {
    pergunta: /oi|ola|bom dia|boa tarde|boa noite|opa|ol√°/i,
    resposta:
      "Ol√°, {nome}! Bem-vindo √† Fazenda Park Nova Conquista! Como posso ajudar? Para um atendimento mais r√°pido, prefira mensagens¬†de¬†texto.",
  },
  {
    pergunta: /segunda|parque funciona|sabado|s√°bado|domingo|horas|hora|funcionamento|hor√°rio|que dia|quais dias|funciona quando|que dia funciona|ques dia|diasperto|aberto|abre|fecha|fechado|hoje abre|amanh√£ abre|t√° aberto|t√° fechado|expediente|horas que abre|horas que fecha|hor√°rio de abrir|hor√°rio de fechar|que horas abre|que horas fecha|qual hor√°rio|qual hora abre|qual hora fecha|quando abre|quando fecha|hoje tem|s√°bado tem|domingo tem|final de semana tem|fim de semana tem|que dia t√° aberto|quando t√° funcionando|abre que dia|fecha que dia|t√° funcionando|funciona at√© que horas|funciona que dia/i,
    resposta:
      "O parque funciona de 09:00 da manh√£ at√© 17:00 da tarde, apenas no domingo.",
  },
  {
    pergunta: /vit√≥ria|da conquista|vitoria da conquista|de conquista/i,
    resposta:
      "Ol√°! O parque fica a 4h e 38 min da cidade de Vit√≥ria da Conquista. Estamos localizados a 15 km de Itamaraty, sentido Gandu, na BR 101. A entrada fica √† esquerda, tem um ponto de √¥nibus e 2 placas grandes do parque na entrada. Posso ajudar em mais alguma coisa?",
  },
  {
    pergunta: /pre√ßo|valor|entrada|custa/i,
    resposta:
      "Pagando a entrada de 30 reais voc√™ tem acesso a todas as piscinas, campo, tobog√£, espa√ßo para fotos, espa√ßo com animais, parquinho para crian√ßas, e muito mais! Obs: Crian√ßas at√© 3 anos n√£o pagam!",
  },
  {
    pergunta: /crian√ßas pagam|crian√ßa|crian√ßas/i,
    resposta:
      "Crian√ßas acima de 3 anos pagam 30 reais. At√© 3 anos, a entrada √© gratuita.",
  },
  {
    pergunta: /desconto para autista|desconto para autistas|descontos para autistas|descontos para autista/i,
    resposta:
      "Atualmente, n√£o oferecemos descontos para autistas. Agradecemos a compreens√£o. Posso ajudar em mais alguma d√∫vida?",
  },
  {
    pergunta: /obrigado|obrigada|obg/i,
    resposta:
      "Agradecemos por utilizar nossos servi√ßos! Esperamos por voc√™ em breve!",
  },
  /*{
    pergunta: /desconto/i,
    resposta:
      "Desconto √© somente para grupos! Para mais detalhes digite: 'Desconto em grupo'",
  },*/
  {
    pergunta: /comidas|bebidas/i,
    resposta:
      "N√£o √© permitido entrar com bebidas, caixas de som ou alimentos de fora.",
  },
  {
    pergunta: /anivers√°rio/i,
    resposta:
      "Pode comemorar anivers√°rio! √â permitido levar bolo e ornamenta√ß√£o, mas doces e salgados n√£o.",
  },
  /*{
    pergunta: /excurs√£o|excurs√µes/i,
    resposta:
      "Sim, aceitamos excurs√µes! Para agendar, √© necess√°rio consultar as datas e a quantidade de pessoas. Entre em contato com o gerente no n√∫mero: 7399037182.",
  },
  {
    pergunta:
      /almo√ßo|comida|refei√ß√µes|caf√© da manh√£|caf√©|alimentos|alimento|alimenta√ß√£o|restaurante/i,
    resposta:
      "Temos restaurante com op√ß√µes de buffet e √† la carte. Digitando a palavra CARD√ÅPIO, voc√™ poder√° ver o nosso card√°pio digital. Lembrando que n√£o √© permitido a entrada de alimentos ou bebidas de fora",
  }, */
  {
    pergunta: /pagamento|formas de pagamento|cart√£o|pix/i,
    resposta:
      "Aceitamos pagamentos em cart√£o, Pix ou dinheiro. O pagamento √© feito apenas de forma presencial.",
  },
  {
    pergunta: /caixinha de som|m√∫sica|som/i,
    resposta:
      "N√£o √© permitido entrar com caixas de som ou qualquer outro dispositivo de som no parque.",
  },
  {
    pergunta: /carro|transporte|√¥nibus|hor√°rio de transporte/i,
    resposta:
      "O parque n√£o oferece servi√ßo de transporte ou carro para levar os visitantes. Recomendamos verificar op√ß√µes de transporte particulares ou √¥nibus da regi√£o.",
  },
  {
    pergunta: /estadia|dormir|acomoda√ß√£o|hospedagem|dormit√≥rio|pernoite|quartos|hospedar|cama|abrigo|ref√∫gio|alojamento|hospedagem de grupo|alojamento tempor√°rio|casa de hospedagem|quarto de hospedagem|alojamento coletivo/i,
    resposta:
      "O parque n√£o oferece acomoda√ß√µes para estadia. A cidade mais pr√≥xima com op√ß√µes de hospedagem √© Itamarati, recomendamos procurar por l√°.",
  },
  {
    pergunta: /desconto para professor|desconto para professor/i,
    resposta: "N√£o, n√£o oferecemos descontos para professores.",
  },
];

const verificarDataFinalDeSemana = (mensagem) => {
  const regexData =
    /\b(\d{1,2})\s+de\s+(janeiro|fevereiro|mar√ßo|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)\b/i;
  const meses = {
    janeiro: 0,
    fevereiro: 1,
    mar√ßo: 2,
    abril: 3,
    maio: 4,
    junho: 5,
    julho: 6,
    agosto: 7,
    setembro: 8,
    outubro: 9,
    novembro: 10,
    dezembro: 11,
  };

  const match = mensagem.match(regexData);

  if (match) {
    const dia = parseInt(match[1]);
    const mes = meses[match[2].toLowerCase()];
    const anoAtual = new Date().getFullYear();

    // Converte a data da mensagem em um objeto Date
    const data = new Date(anoAtual, mes, dia);

    // Verifica se a data √© um final de semana (s√°bado ou domingo)
    if (isWeekend(data)) {
      return "O parque vai abrir nessa data, pois cai em um final de semana! üòä";
    } else {
      return "O parque n√£o abre durante a semana. Estamos abertos apenas aos s√°bados e domingos.";
    }
  }

  return null;
};

const obterPrevisao = async (latitude, longitude) => {
  try {
    const apiKey = "761a579c8372cb6bbd38d01188618164"; // Substitua pela sua chave da OpenWeatherMap
    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric&lang=pt_br`;

    const response = await axios.get(url);
    const dados = response.data;

    return `Ol√°! ${dados.weather[0].main.toLowerCase().includes("rain") ? 
  "Parece que pode chover." : `O tempo est√° ${dados.weather[0].description} e sem previs√£o de chuva.`} A temperatura √© de ${dados.main.temp}¬∞C, ${dados.main.temp > 30 ? "bem quente, ent√£o se hidrate!" : dados.main.temp < 20 ? "mais fresquinho, talvez um agasalho ajude." : "agrad√°vel para aproveitar o dia."} O vento est√° a ${dados.wind.speed} m/s, ${dados.wind.speed > 5 ? "com uma brisa mais forte." : "bem calmo."} Qualquer coisa, √© s√≥ chamar!`;

  } catch (error) {
    console.error("Erro ao obter previs√£o do tempo:", error);
    return "‚ùå N√£o foi poss√≠vel obter a previs√£o do tempo no momento.";
  }
};
const palavrasClima = [
  "clima", "tempo", "previs√£o", "chuva", "calor", "frio", "sol", "nublado", "temperatura",
  "chovendo", "esfriando", "esquentando", "quantos graus", "vai chover", "vai fazer sol",
  "t√° quente", "t√° frio", "t√° sol", "tempo hoje", "tempo agora", "vento", "sensa√ß√£o t√©rmica"
];

const verificarRespostaPredefinida = (mensagem, nomeUsuario) => {
  const mensagemMin = mensagem.toLowerCase();
  const respostasEncontradas = new Set(); // Usando Set para evitar repeti√ß√µes

  const respostaData = verificarDataFinalDeSemana(mensagem);
  if (respostaData) respostasEncontradas.add(respostaData); // Adiciona resposta sem repetir

  for (const item of respostasPredefinidas) {
    if (item.pergunta.test(mensagemMin)) {
      let resposta = item.resposta;

      // Substitui o placeholder {nome} pelo nome real do usu√°rio
      if (resposta.includes("{nome}")) {
        resposta = resposta.replace("{nome}", nomeUsuario);
      }

      // S√≥ adiciona se a resposta ainda n√£o foi adicionada ao Set
      respostasEncontradas.add(resposta); // Set garante que n√£o haver√° duplica√ß√£o
    }
  }

  // Retorna a resposta √∫nica, ou null se n√£o houver resposta
  return respostasEncontradas.size > 0 ? Array.from(respostasEncontradas).join("\n") : null;
};

venom
  .create({
    session: "chatGPT_BOT",
    multidevice: true,
    headless: true, // Ver o navegador para depura√ß√£o
    logQR: true, // Mostrar QR Code no terminal
    debug: true, // Habilitar logs internos
  })
  .then((client) => start(client))
  .catch((err) => console.log(err));

const header = {
  "Content-Type": "application/json",
  Authorization:
    "Bearer sk-svcacct-_2I-KeutmUGMK8jRxJS4_Yn-RwEl-Anlokda9IC3qcJ28ucIrV5JAp5NIpNYa892XYEmMyT3BlbkFJJJKvwAWr6u1aRsac1H_z2kI_nRm4n3p0HsVc9qfh180z0bKzem6gZtOT8qUtYrwsi0bZ0A",
};

const path = require("path");

const start = (client) => {
  console.log("‚úÖ Fun√ß√£o start foi chamada!");
  client.onMessage(async (message) => {
    console.log("Mensagem recebida:", message);

    const primeiroNome = message.sender.pushname ? message.sender.pushname.split(" ")[0] : "Visitante";

    let respostaFinal = verificarRespostaPredefinida(message.body, primeiroNome) || "";

    let precisaEnviarLocalizacao = false;
    let precisaEnviarCardapio = false;
    let precisaEnviarOpcoesDesconto = false;
    let precisaEnviarPrevisao = false;

    if (palavrasClima.some((palavra) => message.body.toLowerCase().includes(palavra))) {
      const latitude = "-13.9306102";
      const longitude = "-39.499918";
      respostaFinal += await obterPrevisao(latitude, longitude);
      precisaEnviarPrevisao = true;
  }

    // Verifica se a mensagem menciona localiza√ß√£o
    const palavrasLocalizacao = ["localiza√ß√£o", "endere√ßo", "onde fica", "aonde fica", "qual a localidade", "localidade", "local", "endereco", "qual cidade", "que cidade"];
    if (palavrasLocalizacao.some((palavra) => message.body.toLowerCase().includes(palavra))) {
      respostaFinal += "üìç *Nosso Endere√ßo:*\nEstamos localizados a 15 km de Itamaraty, sentido Gandu, na BR 101. A entrada fica √† esquerda, com um ponto de √¥nibus e 2 placas grandes do parque na entrada. Tamb√©m estamos a 25 km de Gandu, sentido Itamaraty. A entrada fica a 800 metros depois da Fazenda Paineiras, na BR 101, √† direita, com as mesmas 2 placas do parque.";
      precisaEnviarLocalizacao = true;
    }

    // Verifica se a mensagem menciona card√°pio
    const palavrasCardapio = ["card√°pio", "cardapio", "menu", "op√ß√µes", "pratos", "comida", "o que tem para comer", "almo√ßo", "comida", "refei√ß√µes", "caf√© da manh√£", "caf√©", "alimentos", "alimento", "alimenta√ß√£o", "restaurante"];
    if (palavrasCardapio.some((palavra) => message.body.toLowerCase().includes(palavra))) {
      respostaFinal += "Temos restaurante com op√ß√µes de buffet e √† la carte. Lembrando que n√£o √© permitido a entrada de alimentos ou bebidas de fora! Confira abaixo. üëá";
      precisaEnviarCardapio = true;
    }

    // Verifica se a mensagem menciona desconto em grupo
    const palavrasDesconto = ["desconto em grupo", "desconto pra grupo", "pacote", "excurs√£o", "confra", "confraterniza√ß√£o", "desconto", "grupo", "grupos"];
    if (palavrasDesconto.some((palavra) => message.body.toLowerCase().includes(palavra))) {
      precisaEnviarOpcoesDesconto = true;
    }

    // Envia a resposta predefinida se existir
    if (respostaFinal) {
      await client.sendText(message.from, respostaFinal);
    }

    // Se precisar enviar localiza√ß√£o, faz isso depois de enviar o texto
    if (precisaEnviarLocalizacao) {
      await client.sendLocation(
        message.from,
        "-13.9306102",
        "-39.499918",
        "Fazenda Park Nova Conquista"
      );
    }

    // Se precisar enviar o card√°pio, envia as imagens locais
    if (precisaEnviarCardapio) {
      const imagePath1 = path.resolve(__dirname, "images", "cardapio1.jpeg");
      const imagePath2 = path.resolve(__dirname, "images", "cardapio2.jpeg");

      await client.sendImage(
        message.from,
        imagePath1,
        "cardapio1.jpg",
        ""
      );

      await client.sendImage(
        message.from,
        imagePath2,
        "cardapio2.jpg",
        ""
      );
    }

    // Se precisar enviar as op√ß√µes de desconto em texto
    if (precisaEnviarOpcoesDesconto) {
      await client.sendText(message.from, "üí° Desconto √© somente para grupos! Para agendar, √© necess√°rio consultar as datas e a quantidade de pessoas. Digite a op√ß√£o 1 ou 2:\n\n1Ô∏è‚É£ - At√© 30 pessoas\n2Ô∏è‚É£ - Acima de 50 pessoas");
    }

    // Detectar resposta do usu√°rio para op√ß√µes de desconto
    if (message.body === "1" || message.body === "2") {
      console.log("Resposta de desconto recebida:", message.body);
      await client.sendText(
        message.from,
        "üìû Para mais informa√ß√µes sobre pacotes e descontos, entre em contato com nosso gerente pelo WhatsApp: *+55 73 99037-182*."
      );
    }

    //const historico = banco.db.find((num) => num.num === message.from);
    //historico.historico.push("user: " + message.body);
  });
};
    /*axios
      .post(
        "https://api.openai.com/v1/chat/completions",
        {
          model: "gpt-3.5-turbo",
          messages: [
            { role: "system", content: treinamento },
            { role: "system", content: "Hist√≥rico de conversas: " + historico.historico },
            { role: "user", content: message.body },
          ],
          max_tokens: 50,
        },
        { headers: header }
      )
      .then((response) => {
        const respostaIA = response.data.choices[0].message.content;
        historico.historico.push("assistant: " + respostaIA);
        client.sendText(message.from, respostaIA);
      })
      .catch((err) => {
        console.error("Erro na OpenAI:", err.response ? err.response.data : err);
      });*/
//  });
//};
